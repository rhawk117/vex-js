{"version":3,"file":"index.esm.js","sources":["../src/vex-element.ts","../src/vex-doc.ts"],"sourcesContent":["/**\r\n * @file VexElement.ts\r\n * @description A lightweight DOM utility class for chainable element manipulation, animations, and reactive signals.\r\n */\r\n\r\nexport class VexElement {\r\n\tprivate el: HTMLElement;\r\n\tprivate static animationsInjected: boolean = false;\r\n\r\n\t/**\r\n\t * creates an instance of VexElement.\r\n\t * @param {HTMLElement | string} element - A DOM element or a CSS selector string.\r\n\t * @throws Will throw an error if the element is not found.\r\n\t */\r\n\tconstructor(element: HTMLElement | string) {\r\n\t\tif (typeof element === \"string\") {\r\n\t\t\tconst found = document.querySelector(element);\r\n\t\t\tif (!found) {\r\n\t\t\t\tthrow new Error(`VexJS: Element not found for selector: ${element}`);\r\n\t\t\t}\r\n\t\t\tthis.el = found as HTMLElement;\r\n\t\t} else {\r\n\t\t\tthis.el = element;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * returns a new VexElement instance wrapping the first descendant matching the selector.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @returns {VexElement} A new VexElement instance.\r\n\t * @throws Will throw an error if no element is found.\r\n\t */\r\n\tselect(selector: string): VexElement {\r\n\t\tconst found = this.el.querySelector(selector);\r\n\t\tif (!found) {\r\n\t\t\tthrow new Error(`VexJS: element not found for selector: ${selector}`);\r\n\t\t}\r\n\t\treturn new VexElement(found as HTMLElement);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the element's id.\r\n\t * @overload\r\n\t * @returns {string} The element's id.\r\n\t */\r\n\tid(): string;\r\n\t/**\r\n\t * Selects an element by id.\r\n\t * @param elementId {string}\r\n\t * @returns {VexElement} A new VexElement instance.\r\n\t */\r\n\tid(elementId: string): VexElement;\r\n\tid(elementId?: string): string | VexElement {\r\n\t\tif (elementId === undefined) {\r\n\t\t\treturn this.el.id;\r\n\t\t}\r\n\t\treturn this.select(`#${elementId}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of VexElement instances for all descendants matching the selector.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @returns {VexElement[]} Array of VexElement instances.\r\n\t */\r\n\tall(selector: string): VexElement[] {\r\n\t\tconst nodeList = this.el.querySelectorAll(selector);\r\n\t\treturn Array.from(nodeList).map((el) => new VexElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * Iterates over each descendant matching the selector, invoking the callback.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @param {(VexElement: VexElement, index: number) => void} callback - Function to call for each element.\r\n\t * @returns {VexElement[]} Array of VexElement instances.\r\n\t */\r\n\teach(\r\n\t\tselector: string,\r\n\t\tcallback: (VexElement: VexElement, index: number) => void\r\n\t): VexElement[] {\r\n\t\tconst elements = this.all(selector);\r\n\t\telements.forEach((VexElement, index) => callback(VexElement, index));\r\n\t\treturn elements;\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets the inner HTML.\r\n\t * @overload\r\n\t * @returns {string} The element's inner HTML.\r\n\t */\r\n\thtml(): string;\r\n\t/**\r\n\t * sets the inner HTML and returns the instance.\r\n\t * @param {string} content - HTML content.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\thtml(content: string): VexElement;\r\n\thtml(content?: string): string | VexElement {\r\n\t\tif (content === undefined) {\r\n\t\t\treturn this.el.innerHTML;\r\n\t\t} else {\r\n\t\t\tthis.el.innerHTML = content;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets the text content.\r\n\t * @overload\r\n\t * @returns {string} The element's text content.\r\n\t */\r\n\ttext(): string;\r\n\t/**\r\n\t * sets the text content and returns the instance.\r\n\t * @param {string} content - Text content.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\ttext(content: string): VexElement;\r\n\ttext(content?: string): string | VexElement {\r\n\t\tif (content === undefined) {\r\n\t\t\treturn this.el.textContent || \"\";\r\n\t\t} else {\r\n\t\t\tthis.el.textContent = content;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * adds an event listener and returns a cleanup function to remove it.\r\n\t * @param {string} eventName - Event name.\r\n\t * @param {(e: Event) => void} callback - Callback function.\r\n\t * @returns {() => void} Function to remove the event listener.\r\n\t */\r\n\tevent(eventName: string, callback: (e: Event) => void): () => void {\r\n\t\tthis.el.addEventListener(eventName, callback);\r\n\t\treturn () => {\r\n\t\t\tthis.el.removeEventListener(eventName, callback);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * adds an event listener that is automatically removed after one invocation.\r\n\t * @param {string} eventName - Event name.\r\n\t * @param {(e: Event) => void} callback - Callback function.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tonce(eventName: string, callback: (e: Event) => void): VexElement {\r\n\t\tthis.el.addEventListener(eventName, callback, { once: true });\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches a custom event.\r\n\t * @param {string} eventName - Custom event name.\r\n\t * @param {{ [key: string]: any }} [details={}] - Event details.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\temit(eventName: string, details: { [key: string]: any } = {}): VexElement {\r\n\t\tconst event = new CustomEvent(eventName, { detail: details });\r\n\t\tthis.el.dispatchEvent(event);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t// ---------------------\r\n\t// element class methods\r\n\t// ---------------------\r\n\r\n\t/**\r\n\t * Adds a class to the element.\r\n\t * @param {string} className - Class name to add.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tclassed(className: string): VexElement {\r\n\t\tthis.el.classList.add(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a class from the element.\r\n\t * @param {string} className - Class name to remove.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tdeclass(className: string): VexElement {\r\n\t\tthis.el.classList.remove(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a class on the element.\r\n\t * @param {string} className - Class name to toggle.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\ttoggleClass(className: string): VexElement {\r\n\t\tthis.el.classList.toggle(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * checks if the element has a specific class.\r\n\t * @param {string} className - Class name to check.\r\n\t * @returns {boolean} True if the element has the class.\r\n\t */\r\n\thasClass(className: string): boolean {\r\n\t\treturn this.el.classList.contains(className);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets or sets an attribute.\r\n\t * @overload\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @returns {string} The attribute's value.\r\n\t */\r\n\tattr(attribute: string): string;\r\n\t/**\r\n\t * Sets an attribute and returns the instance.\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @param {string} value - Attribute value.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tattr(attribute: string, value: string): VexElement;\r\n\tattr(attribute: string, value?: string): string | VexElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.getAttribute(attribute) || \"\";\r\n\t\t} else {\r\n\t\t\tthis.el.setAttribute(attribute, value);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * checks if the element has a specific attribute.\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @returns {boolean} True if the attribute exists.\r\n\t */\r\n\thasAttr(attribute: string): boolean {\r\n\t\treturn this.el.hasAttribute(attribute);\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets a data attribute.\r\n\t * @overload\r\n\t * @param {string} attribute - Data attribute name.\r\n\t * @returns {string} The data attribute's value.\r\n\t */\r\n\tdata(attribute: string): string;\r\n\t/**\r\n\t * sets a data attribute and returns the instance.\r\n\t * @param {string} attribute - Data attribute name.\r\n\t * @param {string} value - Data attribute value.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tdata(attribute: string, value: string): VexElement;\r\n\tdata(attribute: string, value?: string): string | VexElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.dataset[attribute] || \"\";\r\n\t\t} else {\r\n\t\t\tthis.el.dataset[attribute] = value;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets an inline style property.\r\n\t * @overload\r\n\t * @param {string} property - CSS property name.\r\n\t * @returns {string} The property's value.\r\n\t */\r\n\tstyle(property: string): string;\r\n\t/**\r\n\t * Sets a style property and returns the instance.\r\n\t * @param {string} property - CSS property name.\r\n\t * @param {string} value - CSS property value.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tstyle(property: string, value: string): VexElement;\r\n\tstyle(property: string, value?: string): string | VexElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.style.getPropertyValue(property);\r\n\t\t} else {\r\n\t\t\tthis.el.style.setProperty(property, value);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets a native property.\r\n\t * @overload\r\n\t * @template T\r\n\t * @param {keyof T} propertyName - The property name.\r\n\t * @returns {T[keyof T]} The property's value.\r\n\t */\r\n\tprop<T>(propertyName: keyof T): T[keyof T];\r\n\t/**\r\n\t * sets a native property and returns the instance.\r\n\t * @template T\r\n\t * @param {keyof T} propertyName - The property name.\r\n\t * @param {T[keyof T]} value - The new value.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tprop<T>(propertyName: keyof T, value: T[keyof T]): VexElement;\r\n\tprop<T>(propertyName: keyof T, value?: T[keyof T]): T[keyof T] | VexElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn (this.el as any)[propertyName];\r\n\t\t} else {\r\n\t\t\t(this.el as any)[propertyName] = value;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Filters descendant elements matching the selector and predicate.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @param {(VexElement: VexElement) => boolean} predicate - Predicate function.\r\n\t * @returns {VexElement[]} Array of VexElement instances that match the predicate.\r\n\t */\r\n\twhere(\r\n\t\tselector: string,\r\n\t\tpredicate: (VexElement: VexElement) => boolean\r\n\t): VexElement[] {\r\n\t\treturn this.all(selector).filter((VexElement) => predicate(VexElement));\r\n\t}\r\n\r\n\t/**\r\n\t * filters descendant elements matching the selector that do NOT satisfy the predicate.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @param {(VexElement: VexElement) => boolean} predicate - Predicate function.\r\n\t * @returns {VexElement[]} Array of VexElement instances that do not match the predicate.\r\n\t */\r\n\texcluding(\r\n\t\tselector: string,\r\n\t\tpredicate: (vexEl: VexElement) => boolean\r\n\t): VexElement[] {\r\n\t\treturn this.all(selector).filter((vEl) => !predicate(vEl));\r\n\t}\r\n\r\n\t/**\r\n\t * returns the closest ancestor (or self) that matches the selector.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @returns {VexElement | null} Closest matching VexElement instance or null.\r\n\t */\r\n\tclosest(selector: string): VexElement | null {\r\n\t\tconst found = this.el.closest(selector);\r\n\t\treturn found ? new VexElement(found as HTMLElement) : null;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the parent element as a VexElement instance.\r\n\t * @returns {VexElement | null} The parent VexElement instance or null.\r\n\t */\r\n\tparent(): VexElement | null {\r\n\t\treturn this.el.parentElement ? new VexElement(this.el.parentElement) : null;\r\n\t}\r\n\r\n\t/**\r\n\t * returns an array of children as VexElement instances.\r\n\t * @returns {VexElement[]} Array of child VexElement instances.\r\n\t */\r\n\tchildren(): VexElement[] {\r\n\t\treturn Array.from(this.el.children).map(\r\n\t\t\t(child) => new VexElement(child as HTMLElement)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * returns the underlying native HTMLElement.\r\n\t * @returns {HTMLElement} The native DOM element.\r\n\t */\r\n\tnative(): HTMLElement {\r\n\t\treturn this.el;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Observes attribute changes on the element.\r\n\t * @param {string} attribute - Attribute name to observe.\r\n\t * @param {(oldValue: string | null, newValue: string | null) => void} callback - Callback when attribute changes.\r\n\t * @returns {() => void} Function to disconnect the observer.\r\n\t */\r\n\tobserve(\r\n\t\tattribute: string,\r\n\t\tcallback: (oldValue: string | null, newValue: string | null) => void\r\n\t): () => void {\r\n\t\tconst observer = new MutationObserver((mutations) => {\r\n\t\t\tfor (const mutation of mutations) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tmutation.type === \"attributes\" &&\r\n\t\t\t\t\tmutation.attributeName === attribute\r\n\t\t\t\t) {\r\n\t\t\t\t\tconst oldVal = mutation.oldValue;\r\n\t\t\t\t\tconst newVal = this.el.getAttribute(attribute);\r\n\t\t\t\t\tcallback(oldVal, newVal);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tobserver.observe(this.el, {\r\n\t\t\tattributes: true,\r\n\t\t\tattributeFilter: [attribute],\r\n\t\t\tattributeOldValue: true,\r\n\t\t});\r\n\t\treturn () => observer.disconnect();\r\n\t}\r\n\r\n\t/**\r\n\t * uses IntersectionObserver to observe when the element enters or leaves the viewport.\r\n\t * @param {(entry: IntersectionObserverEntry) => void} onScreen - Callback when element is in view.\r\n\t * @param {(entry: IntersectionObserverEntry) => void} offScreen - Callback when element is out of view.\r\n\t * @param {IntersectionObserverInit} [options] - IntersectionObserver options.\r\n\t * @returns {() => void} Function to disconnect the observer.\r\n\t */\r\n\tintersection(\r\n\t\tonScreen: (entry: IntersectionObserverEntry) => void,\r\n\t\toffScreen: (entry: IntersectionObserverEntry) => void,\r\n\t\toptions?: IntersectionObserverInit\r\n\t): () => void {\r\n\t\tconst observer = new IntersectionObserver((entries) => {\r\n\t\t\tentries.forEach((entry) => {\r\n\t\t\t\tentry.isIntersecting ? onScreen(entry) : offScreen(entry);\r\n\t\t\t});\r\n\t\t}, options);\r\n\t\tobserver.observe(this.el);\r\n\t\treturn () => observer.disconnect();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a class to the element for a specified time (ms) or until a promise resolves.\r\n\t * @param {string} className - Class name to add.\r\n\t * @param {number | Promise<any>} duration - Duration in ms or a promise.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\ttimedClass(className: string, duration: number | Promise<any>): VexElement {\r\n\t\tthis.classed(className);\r\n\t\tif (typeof duration === \"number\") {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.declass(className);\r\n\t\t\t}, duration);\r\n\t\t} else if (duration && typeof duration.then === \"function\") {\r\n\t\t\tduration.then(() => this.declass(className));\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * injects animation CSS if not already injected.\r\n\t * @private\r\n\t */\r\n\tprivate static ensureAnimationsInjected(): void {\r\n\t\tif (VexElement.animationsInjected) return;\r\n\t\tVexElement.animationsInjected = true;\r\n\t}\r\n\r\n\t/**\r\n\t * helper that applies an animation class with a given duration.\r\n\t * @private\r\n\t * @param {string} animationClass - CSS class for the animation.\r\n\t * @param {number} duration - Duration of the animation in ms.\r\n\t * @param {() => void} [onComplete] - Optional callback after animation.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tprivate animateClass(\r\n\t\tanimationClass: string,\r\n\t\tduration: number,\r\n\t\tonComplete?: () => void\r\n\t): VexElement {\r\n\t\tVexElement.ensureAnimationsInjected();\r\n\t\tthis.el.style.setProperty(\"--vex-duration\", `${duration}ms`);\r\n\t\tthis.classed(animationClass);\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.declass(animationClass);\r\n\t\t\tif (onComplete) onComplete();\r\n\t\t}, duration);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * fades in the element.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tfadeIn(duration: number, onComplete?: () => void): VexElement {\r\n\t\treturn this.animateClass(\"vex-anim-fade-in\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * fades out the element.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tfadeOut(duration: number, onComplete?: () => void): VexElement {\r\n\t\treturn this.animateClass(\"vex-anim-fade-out\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Slides the element in from the left.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tslideRight(duration: number, onComplete?: () => void): VexElement {\r\n\t\treturn this.animateClass(\"vex-anim-slide-right\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Slightly moves the element to the left.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tslightLeft(duration: number, onComplete?: () => void): VexElement {\r\n\t\treturn this.animateClass(\"vex-anim-slight-left\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Slightly moves the element down.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tslightDown(duration: number, onComplete?: () => void): VexElement {\r\n\t\treturn this.animateClass(\"vex-anim-slight-down\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Slides the element up.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tslideUp(duration: number, onComplete?: () => void): VexElement {\r\n\t\treturn this.animateClass(\"vex-anim-slide-up\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * rotates the element.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tspins(duration: number, onComplete?: () => void): VexElement {\r\n\t\treturn this.animateClass(\"vex-anim-spins\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Bounces the element.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tbounces(duration: number, onComplete?: () => void): VexElement {\r\n\t\treturn this.animateClass(\"vex-anim-bounces\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Blinks the element's text.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexElement} The current VexElement instance.\r\n\t */\r\n\tblinkText(duration: number, onComplete?: () => void): VexElement {\r\n\t\treturn this.animateClass(\"vex-anim-blink-text\", duration, onComplete);\r\n\t}\r\n}\r\n","/**\r\n * @file VexDoc.ts\r\n * @description Document-level utilities for working with VexElement.\r\n */\r\n\r\nimport { VexElement } from \"./vex-element\";\r\n\r\nexport class vexd {\r\n\t/**\r\n\t * equivalent to document.querySelector, but returns a VexElement instance.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @returns {VexElement} A VexElement instance wrapping the selected element.\r\n\t * @throws Will throw an error if no element is found.\r\n\t */\r\n\tstatic select(selector: string): VexElement {\r\n\t\tconst el = document.querySelector(selector);\r\n\t\tif (!el) throw new Error(`Element not found for selector: ${selector}`);\r\n\t\treturn new VexElement(el as HTMLElement);\r\n\t}\r\n\r\n\t/**\r\n\t * returns a VexElement instance, equivalent to document.getElementById.\r\n\t * @param {string} id - The element's id.\r\n\t * @returns {VexElement} a VexElement instance.\r\n\t * @throws will throw an error if no element is found.\r\n\t */\r\n\tstatic id(id: string): VexElement {\r\n\t\tconst el = document.getElementById(id);\r\n\t\tif (!el) throw new Error(`Element not found with id: ${id}`);\r\n\t\treturn new VexElement(el);\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to document.querySelectorAll, but returns an array of VexElement instances.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @param {(vex: VexElement, index: number) => void} callback - Callback for each element.\r\n\t * @returns {VexElement[]} Array of VexElement instances.\r\n\t */\r\n\tstatic each(\r\n\t\tselector: string,\r\n\t\tcallback: (vex: VexElement, index: number) => void\r\n\t): void {\r\n\t\tconst nodeList = document.querySelectorAll(selector);\r\n\t\tArray.from(nodeList).forEach((el, index) => {\r\n\t\t\tconst vex = new VexElement(el as HTMLElement);\r\n\t\t\tcallback(vex, index);\r\n\t\t});\r\n\t}\r\n\r\n\tstatic all(selector: string): VexElement[] {\r\n\t\tconst nodeList = document.querySelectorAll(selector);\r\n\t\treturn Array.from(nodeList).map((el) => new VexElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * executes a callback once the DOM is fully loaded.\r\n\t * @param {() => void} callback - Callback function.\r\n\t */\r\n\tstatic ready(callback: () => void): void {\r\n\t\tif (document.readyState !== \"loading\") {\r\n\t\t\tcallback();\r\n\t\t} else {\r\n\t\t\tdocument.addEventListener(\"DOMContentLoaded\", callback);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * defines a snippet of HTML that is rendered from an object in the\r\n\t *\r\n\t * @template T\r\n\t * @param {(...args: any[]) => string} template - A template function.\r\n\t * @returns {{ render: (data: T) => string }} An object with a render method.\r\n\t */\r\n\tstatic snippet<T extends object>(\r\n\t\ttemplate: (props: T) => string\r\n\t): (data: T) => string {\r\n\t\treturn (data: T) => template(data);\r\n\t}\r\n\r\n\t/**\r\n\t * sets the document title.\r\n\t * @param {string} title - New title.\r\n\t */\r\n\tstatic title(title: string): void {\r\n\t\tdocument.title = title;\r\n\t}\r\n\r\n\t/**\r\n\t * imports a CSS file into the document by creating a <link> element.\r\n\t * @param {string} cssPath - Path to the CSS file.\r\n\t * @returns {VexElement} A VexElement instance wrapping the created <link> element.\r\n\t */\r\n\tstatic importCSS(cssPath: string): VexElement {\r\n\t\tconst link = document.createElement(\"link\");\r\n\t\tlink.rel = \"stylesheet\";\r\n\t\tlink.href = cssPath;\r\n\t\tdocument.head.appendChild(link);\r\n\t\treturn new VexElement(link as HTMLElement);\r\n\t}\r\n\r\n\t/**\r\n\t * removes CSS files that include the given file name.\r\n\t * @param {string} cssFileName - Partial name of the CSS file.\r\n\t * @returns {VexElement[]} Array of VexElement instances for the removed elements.\r\n\t */\r\n\tstatic removeCSS(cssFileName: string): VexElement[] {\r\n\t\tconst links = Array.from(\r\n\t\t\tdocument.querySelectorAll('link[rel=\"stylesheet\"]')\r\n\t\t);\r\n\t\tconst removed: VexElement[] = [];\r\n\t\tlinks.forEach((link) => {\r\n\t\t\tif (link.getAttribute(\"href\")?.includes(cssFileName)) {\r\n\t\t\t\tlink.remove();\r\n\t\t\t\tremoved.push(new VexElement(link as HTMLElement));\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn removed;\r\n\t}\r\n\r\n\t/**\r\n\t * creates a new element in the document, returned as a vex element.\r\n\t * @param {string} elementName - The tag name for the element.\r\n\t * @returns {VexElement} A VexElement instance wrapping the new element.\r\n\t */\r\n\tstatic create(elementName: string): VexElement {\r\n\t\tconst el = document.createElement(elementName);\r\n\t\treturn new VexElement(el);\r\n\t}\r\n\r\n\t/**\r\n\t * gets all of the forms in the document with an optional selector to filter them\r\n\t * by\r\n\t * @param {string} [optionalSelector] - Optional CSS selector to filter forms.\r\n\t * @returns {VexElement[]} Array of VexElement instances wrapping form elements.\r\n\t */\r\n\tstatic forms(optionalSelector?: string): VexElement[] {\r\n\t\tlet forms: HTMLCollectionOf<HTMLFormElement>;\r\n\t\tif (optionalSelector) {\r\n\t\t\tforms = document.querySelectorAll(`form${optionalSelector}`) as any;\r\n\t\t} else {\r\n\t\t\tforms = document.getElementsByTagName(\"form\");\r\n\t\t}\r\n\t\treturn Array.from(forms).map((el) => new VexElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to document.getElementsByTagName\r\n\t * @param {string} tagName - The tag name.\r\n\t * @returns {VexElement[]} Array of VexElement instances.\r\n\t */\r\n\tstatic tags(tagName: string): VexElement[] {\r\n\t\tconst tags = document.getElementsByTagName(tagName);\r\n\t\treturn Array.from(tags).map((el) => new VexElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to document.getElementsByClassName\r\n\t * @param {string} className - The class name.\r\n\t * @returns {VexElement[]} Array of VexElement instances.\r\n\t */\r\n\tstatic classed(className: string): VexElement[] {\r\n\t\tconst elements = document.getElementsByClassName(className);\r\n\t\treturn Array.from(elements).map((el) => new VexElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * Provides a reactive signal mechanism.\r\n\t * @template T\r\n\t * @param {T} initialValue - The initial value.\r\n\t * @returns {[ (cb: (oldValue: T, newValue: T) => void) => void, (newValue: T) => void ]}\r\n\t * Subscribe and setState functions.\r\n\t */\r\n\tstatic signal<T>(\r\n\t\tinitialValue: T\r\n\t): [\r\n\t\tsubscribe: (cb: (oldValue: T, newValue: T) => void) => void,\r\n\t\tsetState: (newValue: T) => void\r\n\t] {\r\n\t\tlet state = initialValue;\r\n\t\tconst subscribers: Array<(oldValue: T, newValue: T) => void> = [];\r\n\t\tconst subscribe = (cb: (oldValue: T, newValue: T) => void) => {\r\n\t\t\tsubscribers.push(cb);\r\n\t\t};\r\n\t\tconst setState = (newValue: T) => {\r\n\t\t\tconst oldValue = state;\r\n\t\t\tstate = newValue;\r\n\t\t\tsubscribers.forEach((cb) => cb(oldValue, newValue));\r\n\t\t};\r\n\t\treturn [subscribe, setState];\r\n\t}\r\n\r\n\t\r\n\r\n\r\n}\r\n"],"names":[],"mappings":"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"}