{"version":3,"file":"index.esm.js","sources":["../src/vexd-element.ts","../src/vexd.ts","../src/vexd-state.ts","../src/vexd-hooks.ts"],"sourcesContent":["/**\r\n * @file vexd-element.ts\r\n * @description A lightweight DOM utility class for chainable element manipulation, animations, and reactive signals.\r\n */\r\n\r\nexport class VexdElement {\r\n\tprivate el: HTMLElement;\r\n\r\n\t/**\r\n\t * creates an instance of VexdElement.\r\n\t * @param {HTMLElement | string} element - A DOM element or a CSS selector string.\r\n\t * @throws Will throw an error if the element is not found.\r\n\t */\r\n\tconstructor(element: HTMLElement | string) {\r\n\t\tif (typeof element === \"string\") {\r\n\t\t\tconst found = document.querySelector(element);\r\n\t\t\tif (!found) {\r\n\t\t\t\tthrow new Error(`VexJS: Element not found for selector: ${element}`);\r\n\t\t\t}\r\n\t\t\tthis.el = found as HTMLElement;\r\n\t\t} else {\r\n\t\t\tthis.el = element;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new VexdElement instance wrapping the first descendant matching the selector.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @returns {VexdElement} A new VexdElement instance.\r\n\t * @throws Will throw an error if no element is found.\r\n\t */\r\n\tselect(selector: string): VexdElement {\r\n\t\tconst found = this.el.querySelector(selector);\r\n\t\tif (!found) {\r\n\t\t\tthrow new Error(`VexJS: element not found for selector: ${selector}`);\r\n\t\t}\r\n\t\treturn new VexdElement(found as HTMLElement);\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new VexdElement instance wrapping the first descendant matching the class name.\r\n\t * @param className\r\n\t * @returns\r\n\t */\r\n\tclassed(className: string) {\r\n\t\treturn this.select(`.${className}`);\r\n\t}\r\n\r\n\t/**\r\n\t * gets all descendants matching the class name.\r\n\t * @param className\r\n\t * @returns {VexdElement[]}\r\n\t */\r\n\tclasses(className: string): VexdElement[] {\r\n\t\treturn this.all(`.${className}`);\r\n\t}\r\n\r\n\t/**\r\n\t * returns a new VexdElement instance wrapping the first descendant matching the id.\r\n\t * @param elementId\r\n\t * @returns {VexdElement}\r\n\t */\r\n\tid(elementId: string): VexdElement {\r\n\t\treturn this.select(`#${elementId}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of VexdElement instances for all descendants matching the selector.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances.\r\n\t */\r\n\tall(selector: string): VexdElement[] {\r\n\t\tconst nodeList = this.el.querySelectorAll(selector);\r\n\t\treturn Array.from(nodeList).map((el) => new VexdElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * Iterates over each descendant matching the selector, invoking the callback.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @param {(VexdElement: VexdElement, index: number) => void} callback - Function to call for each element.\r\n\t */\r\n\teach(\r\n\t\tselector: string,\r\n\t\tcallback: (VexdElement: VexdElement, index: number) => void\r\n\t): void {\r\n\t\tthis.all(selector).forEach((VexdElement, index) =>\r\n\t\t\tcallback(VexdElement, index)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets the inner HTML.\r\n\t * @overload\r\n\t * @returns {string} The element's inner HTML.\r\n\t */\r\n\thtml(): string;\r\n\t/**\r\n\t * sets the inner HTML and returns the instance.\r\n\t * @param {string} content - HTML content.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\thtml(content: string): VexdElement;\r\n\thtml(content?: string): string | VexdElement {\r\n\t\tif (!content) {\r\n\t\t\treturn this.el.innerHTML;\r\n\t\t}\r\n\t\tthis.el.innerHTML = content;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets the text content.\r\n\t * @overload\r\n\t * @returns {string} The element's text content.\r\n\t */\r\n\ttext(): string;\r\n\t/**\r\n\t * sets the text content and returns the instance.\r\n\t * @param {string} content - Text content.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\ttext(content: string): VexdElement;\r\n\ttext(content?: string): string | VexdElement {\r\n\t\tif (!content) {\r\n\t\t\treturn this.el.textContent || \"\";\r\n\t\t}\r\n\t\tthis.el.textContent = content;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * adds an event listener and returns a cleanup function to remove it.\r\n\t * @param {string} eventName - Event name.\r\n\t * @param {(e: Event) => void} callback - Callback function.\r\n\t * @returns {() => void} Function to remove the event listener.\r\n\t */\r\n\tevent(eventName: string, callback: (e: Event) => void): () => void {\r\n\t\tthis.el.addEventListener(eventName, callback);\r\n\t\treturn () => {\r\n\t\t\tthis.el.removeEventListener(eventName, callback);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * adds an event listener that is automatically removed after one invocation.\r\n\t * @param {string} eventName - Event name.\r\n\t * @param {(e: Event) => void} callback - Callback function.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tonce(eventName: string, callback: (e: Event) => void): VexdElement {\r\n\t\tthis.el.addEventListener(eventName, callback, { once: true });\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches a custom event.\r\n\t * @param {string} eventName - Custom event name.\r\n\t * @param {{ [key: string]: any }} [details={}] - Event details.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\temit(eventName: string, details: { [key: string]: any } = {}): VexdElement {\r\n\t\tconst event = new CustomEvent(eventName, { detail: details });\r\n\t\tthis.el.dispatchEvent(event);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a class to the element.\r\n\t * @param {string} className - Class name to add.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\taddClass(className: string): VexdElement {\r\n\t\tthis.el.classList.add(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a class from the element.\r\n\t * @param {string} className - Class name to remove.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tremoveClass(className: string): VexdElement {\r\n\t\tthis.el.classList.remove(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a class on the element.\r\n\t * @param {string} className - Class name to toggle.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\ttoggleClass(className: string): VexdElement {\r\n\t\tthis.el.classList.toggle(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * checks if the element has a specific class.\r\n\t * @param {string} className - Class name to check.\r\n\t * @returns {boolean} True if the element has the class.\r\n\t */\r\n\thasClass(className: string): boolean {\r\n\t\treturn this.el.classList.contains(className);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets or sets an attribute.\r\n\t * @overload\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @returns {string} The attribute's value.\r\n\t */\r\n\tattr(attribute: string): string;\r\n\t/**\r\n\t * Sets an attribute and returns the instance.\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @param {string} value - Attribute value.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tattr(attribute: string, value: string): VexdElement;\r\n\tattr(attribute: string, value?: string): string | VexdElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.getAttribute(attribute) || \"\";\r\n\t\t} else {\r\n\t\t\tthis.el.setAttribute(attribute, value);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * checks if the element has a specific attribute.\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @returns {boolean} True if the attribute exists.\r\n\t */\r\n\thasAttr(attribute: string): boolean {\r\n\t\treturn this.el.hasAttribute(attribute);\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets a data attribute.\r\n\t * @overload\r\n\t * @param {string} attribute - Data attribute name.\r\n\t * @returns {string} The data attribute's value.\r\n\t */\r\n\tdata(attribute: string): string;\r\n\t/**\r\n\t * sets a data attribute and returns the instance.\r\n\t * @param {string} attribute - Data attribute name.\r\n\t * @param {string} value - Data attribute value.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tdata(attribute: string, value: string): VexdElement;\r\n\tdata(attribute: string, value?: string): string | VexdElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.dataset[attribute] || \"\";\r\n\t\t} else {\r\n\t\t\tthis.el.dataset[attribute] = value;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets an inline style property.\r\n\t * @overload\r\n\t * @param {string} property - CSS property name.\r\n\t * @returns {string} The property's value.\r\n\t */\r\n\tstyle(property: string): string;\r\n\t/**\r\n\t * Sets a style property and returns the instance.\r\n\t * @param {string} property - CSS property name.\r\n\t * @param {string} value - CSS property value.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tstyle(property: string, value: string): VexdElement;\r\n\tstyle(property: string, value?: string): string | VexdElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.style.getPropertyValue(property);\r\n\t\t} else {\r\n\t\t\tthis.el.style.setProperty(property, value);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets a native property.\r\n\t * @overload\r\n\t * @template T\r\n\t * @param {keyof T} propertyName - The property name.\r\n\t * @returns {T[keyof T]} The property's value.\r\n\t */\r\n\tprop<T>(propertyName: keyof T): T[keyof T];\r\n\t/**\r\n\t * sets a native property and returns the instance.\r\n\t * @template T\r\n\t * @param {keyof T} propertyName - The property name.\r\n\t * @param {T[keyof T]} value - The new value.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tprop<T>(propertyName: keyof T, value: T[keyof T]): VexdElement;\r\n\tprop<T>(propertyName: keyof T, value?: T[keyof T]): T[keyof T] | VexdElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn (this.el as any)[propertyName];\r\n\t\t} else {\r\n\t\t\t(this.el as any)[propertyName] = value;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Filters descendant elements matching the selector and predicate.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @param {(VexdElement: VexdElement) => boolean} predicate - Predicate function.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances that match the predicate.\r\n\t */\r\n\twhere(\r\n\t\tselector: string,\r\n\t\tpredicate: (VexdElement: VexdElement) => boolean\r\n\t): VexdElement[] {\r\n\t\treturn this.all(selector).filter((VexdElement) => predicate(VexdElement));\r\n\t}\r\n\r\n\t/**\r\n\t * filters descendant elements matching the selector that do NOT satisfy the predicate.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @param {(VexdElement: VexdElement) => boolean} predicate - Predicate function.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances that do not match the predicate.\r\n\t */\r\n\texcluding(\r\n\t\tselector: string,\r\n\t\tpredicate: (vexEl: VexdElement) => boolean\r\n\t): VexdElement[] {\r\n\t\treturn this.all(selector).filter((vEl) => !predicate(vEl));\r\n\t}\r\n\r\n\t/**\r\n\t * returns the closest ancestor (or self) that matches the selector.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @returns {VexdElement | null} Closest matching VexdElement instance or null.\r\n\t */\r\n\tclosest(selector: string): VexdElement | null {\r\n\t\tconst found = this.el.closest(selector);\r\n\t\treturn found ? new VexdElement(found as HTMLElement) : null;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the parent element as a VexdElement instance.\r\n\t * @returns {VexdElement | null} The parent VexdElement instance or null.\r\n\t */\r\n\tparent(): VexdElement | null {\r\n\t\treturn this.el.parentElement\r\n\t\t\t? new VexdElement(this.el.parentElement)\r\n\t\t\t: null;\r\n\t}\r\n\r\n\t/**\r\n\t * returns an array of children as VexdElement instances.\r\n\t * @returns {VexdElement[]} Array of child VexdElement instances.\r\n\t */\r\n\tchildren(): VexdElement[] {\r\n\t\treturn Array.from(this.el.children).map(\r\n\t\t\t(child) => new VexdElement(child as HTMLElement)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * returns the underlying native HTMLElement.\r\n\t * @returns {HTMLElement} The native DOM element.\r\n\t */\r\n\tnative(): HTMLElement {\r\n\t\treturn this.el;\r\n\t}\r\n\r\n\t/**\r\n\t * uses the MutationObserver API to observe changes to a specific attribute.\r\n\t * @param {string} attribute - Attribute name to observe.\r\n\t * @param {(oldValue: string | null, newValue: string | null) => void} callback - Callback when attribute changes.\r\n\t * @returns {() => void} Function to disconnect the observer.\r\n\t */\r\n\tobserve(\r\n\t\tattribute: string,\r\n\t\tcallback: (oldValue: string | null, newValue: string | null) => void\r\n\t): () => void {\r\n\t\tconst observer = new MutationObserver((mutations) => {\r\n\t\t\tfor (const mutation of mutations) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tmutation.type === \"attributes\" &&\r\n\t\t\t\t\tmutation.attributeName === attribute\r\n\t\t\t\t) {\r\n\t\t\t\t\tconst oldVal = mutation.oldValue;\r\n\t\t\t\t\tconst newVal = this.el.getAttribute(attribute);\r\n\t\t\t\t\tcallback(oldVal, newVal);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tobserver.observe(this.el, {\r\n\t\t\tattributes: true,\r\n\t\t\tattributeFilter: [attribute],\r\n\t\t\tattributeOldValue: true,\r\n\t\t});\r\n\t\treturn () => observer.disconnect();\r\n\t}\r\n\r\n\t/**\r\n\t * uses IntersectionObserver to observe when the element enters or leaves the viewport.\r\n\t * @param {(entry: IntersectionObserverEntry) => void} onScreen - Callback when element is in view.\r\n\t * @param {(entry: IntersectionObserverEntry) => void} offScreen - Callback when element is out of view.\r\n\t * @param {IntersectionObserverInit} [options] - IntersectionObserver options.\r\n\t * @returns {() => void} Function to disconnect the observer.\r\n\t */\r\n\tintersection(\r\n\t\tonScreen: (entry: IntersectionObserverEntry) => void,\r\n\t\toffScreen: (entry: IntersectionObserverEntry) => void,\r\n\t\toptions?: IntersectionObserverInit\r\n\t): () => void {\r\n\t\tconst observer = new IntersectionObserver((entries) => {\r\n\t\t\tentries.forEach((entry) => {\r\n\t\t\t\tentry.isIntersecting ? onScreen(entry) : offScreen(entry);\r\n\t\t\t});\r\n\t\t}, options);\r\n\t\tobserver.observe(this.el);\r\n\t\treturn () => observer.disconnect();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a class to the element for a specified time (ms) or until a promise resolves.\r\n\t * @param {string} className - Class name to add.\r\n\t * @param {number | Promise<any>} duration - Duration in ms or a promise.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\ttimedClass(className: string, duration: number | Promise<any>): VexdElement {\r\n\t\tthis.addClass(className);\r\n\t\tif (typeof duration === \"number\") {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.removeClass(className);\r\n\t\t\t}, duration);\r\n\t\t} else if (duration && typeof duration.then === \"function\") {\r\n\t\t\tduration.then(() => this.removeClass(className));\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to .appendChild\r\n\t * @param el\r\n\t * @returns {VexdElement}\r\n\t */\r\n\tadd(el: HTMLElement | string | VexdElement): VexdElement {\r\n\t\tif (typeof el === \"string\") {\r\n\t\t\tthis.el.insertAdjacentHTML(\"beforeend\", el);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif (el instanceof VexdElement) {\r\n\t\t\tthis.el.appendChild(el.native());\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tthis.el.appendChild(el);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to .innerHTML = \"\"\r\n\t * @returns VexdElement\r\n\t */\r\n\tempty(): VexdElement {\r\n\t\tthis.el.innerHTML = \"\";\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * adds the CSS declaration to the element's style.\r\n\t * @param cssDeclaration\r\n\t * @returns\r\n\t */\r\n\tcss(cssDeclaration: Partial<CSSStyleDeclaration>): VexdElement {\r\n\t\tObject.assign(this.el.style, cssDeclaration);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * defines a mouseenter and mouseleave event.\r\n\t * @param mouseEnter\r\n\t * @param mouseLeave\r\n\t * @returns {() => void} function to remove the event listeners.\r\n\t */\r\n\tonHover(\r\n\t\tmouseEnter: (e: Event) => void,\r\n\t\tmouseLeave: (e: Event) => void\r\n\t): VoidFunction {\r\n\t\tthis.el.addEventListener(\"mouseenter\", mouseEnter);\r\n\t\tthis.el.addEventListener(\"mouseleave\", mouseLeave);\r\n\t\treturn () => {\r\n\t\t\tthis.el.removeEventListener(\"mouseenter\", mouseEnter);\r\n\t\t\tthis.el.removeEventListener(\"mouseleave\", mouseLeave);\r\n\t\t};\r\n\t}\r\n\r\n\t/*\r\n\t * equivalent to addEventListener(\"click\", callback) or el.click()\r\n\t * @param callback\r\n\t * @returns {() => void} function to remove the event listener.\r\n\t */\r\n\tonClick(callback: (e: Event) => void): VoidFunction {\r\n\t\tthis.el.addEventListener(\"click\", callback);\r\n\t\treturn () => this.el.removeEventListener(\"click\", callback);\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to addEventListener(\"change\", callback)\r\n\t * @param callback\r\n\t * @returns {() => void} function to remove the event listener.\r\n\t */\r\n\tonChange(callback: (e: Event) => void): VoidFunction {\r\n\t\tthis.el.addEventListener(\"change\", callback);\r\n\t\treturn () => this.el.removeEventListener(\"change\", callback);\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets the value of an input element.\r\n\t * @overload\r\n\t * @returns {string} The value of the input element\r\n\t */\r\n\tvalue(): string;\r\n\t/**\r\n\t * sets the value of an input element and returns the instance.\r\n\t * @param {string} value - New value.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tvalue(value: string): VexdElement;\r\n\tvalue(value?: string): string | VexdElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn (this.el as HTMLInputElement).value;\r\n\t\t}\r\n\t\t(this.el as HTMLInputElement).value = value;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * sets the element's disabled property.\r\n\t * @param predicate\r\n\t * @returns {VexdElement}\r\n\t */\r\n\tdisable(predicate?: boolean): VexdElement {\r\n\t\tthis.prop(\"disabled\", !!predicate);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the element's aria attribute.\r\n\t * @overload\r\n\t * @param attribute\r\n\t */\r\n\taria(attribute: string): string;\r\n\t/**\r\n\t * sets the element's aria attribute.\r\n\t * (e.g aria(\"label\", \"my label\")) -> aria-label=\"my label\"\r\n\t * @param attribute\r\n\t * @param value\r\n\t * @returns {VexdElement}\r\n\t */\r\n\taria(attribute: string, value?: string): string | VexdElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.getAttribute(`aria-${attribute}`) || \"\";\r\n\t\t}\r\n\t\tthis.el.setAttribute(`aria-${attribute}`, value);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the element's position and size.\r\n\t * @returns {DOMRect}\r\n\t */\r\n\tposition(): DOMRect {\r\n\t\treturn this.el.getBoundingClientRect();\r\n\t}\r\n\r\n\t/**\r\n\t * returns the element's offset position.\r\n\t * @returns {top: number, left: number}\r\n\t */\r\n\toffset(): { top: number; left: number } {\r\n\t\tconst { top, left } = this.el.getBoundingClientRect();\r\n\t\treturn { top, left };\r\n\t}\r\n\r\n\t/**\r\n\t * removes the element from the DOM.\r\n\t * @overload\r\n\t * @returns {void}\r\n\t */\r\n\tremove(): void;\r\n\t/**\r\n\t * removes all descendants matching the selector.\r\n\t * @param selector\r\n\t */\r\n\tremove(selector: string): void;\r\n\tremove(selector?: string) {\r\n\t\tif (!selector) {\r\n\t\t\tthis.el.remove();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.all(selector).forEach((el) => el.remove());\r\n\t}\r\n}\r\n","/**\r\n * @file vex-doc.ts\r\n * @description Document-level utilities for working with VexdElement.\r\n */\r\n\r\nimport { VexdElement } from \"./vexd-element\";\r\n\r\nexport class Vexd {\r\n\t/**\r\n\t * equivalent to document.querySelector, but returns a VexdElement instance.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @returns {VexdElement} A VexdElement instance wrapping the selected element.\r\n\t * @throws Will throw an error if no element is found.\r\n\t */\r\n\tstatic select(selector: string): VexdElement {\r\n\t\tconst el = document.querySelector(selector);\r\n\t\tif (!el) throw new Error(`Element not found for selector: ${selector}`);\r\n\t\treturn new VexdElement(el as HTMLElement);\r\n\t}\r\n\r\n\t/**\r\n\t * returns a VexdElement instance, equivalent to document.getElementById.\r\n\t * @param {string} id - The element's id.\r\n\t * @returns {VexdElement} a VexdElement instance.\r\n\t * @throws will throw an error if no element is found.\r\n\t */\r\n\tstatic id(id: string): VexdElement {\r\n\t\tconst el = document.getElementById(id);\r\n\t\tif (!el) throw new Error(`vexd-js: Element not found with id: ${id}`);\r\n\t\treturn new VexdElement(el);\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to document.querySelectorAll, but returns an array of VexdElement instances.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @param {(vex: VexdElement, index: number) => void} callback - Callback for each element.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances.\r\n\t */\r\n\tstatic each(\r\n\t\tselector: string,\r\n\t\tcallback: (vex: VexdElement, index: number) => void\r\n\t): void {\r\n\t\tconst nodeList = document.querySelectorAll(selector);\r\n\t\tArray.from(nodeList).forEach((el, index) => {\r\n\t\t\tconst vex = new VexdElement(el as HTMLElement);\r\n\t\t\tcallback(vex, index);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * querySelectorAll but returns an array of VexdElement instances.\r\n\t * @param selector \r\n\t * @returns \r\n\t */\r\n\tstatic all(selector: string): VexdElement[] {\r\n\t\tconst nodeList = document.querySelectorAll(selector);\r\n\t\treturn Array.from(nodeList).map((el) => new VexdElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * executes a callback once the DOM is fully loaded.\r\n\t * @param {() => void} callback - Callback function.\r\n\t */\r\n\tstatic ready(callback: () => void): void {\r\n\t\tif (document.readyState !== \"loading\") {\r\n\t\t\tcallback();\r\n\t\t} else {\r\n\t\t\tdocument.addEventListener(\"DOMContentLoaded\", callback);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * sets the document title.\r\n\t * @param {string} title - New title.\r\n\t */\r\n\tstatic title(title: string): void {\r\n\t\tdocument.title = title;\r\n\t}\r\n\r\n\t/**\r\n\t * creates a new element in the document, returned as a vex element.\r\n\t * @param {string} elementName - The tag name for the element.\r\n\t * @returns {VexdElement} A VexdElement instance wrapping the new element.\r\n\t */\r\n\tstatic create(\r\n\t\telementName: string,\r\n\t\toptions?: ElementCreationOptions\r\n\t): VexdElement {\r\n\t\tconst el = document.createElement(elementName, options);\r\n\t\treturn new VexdElement(el);\r\n\t}\r\n\r\n\t/**\r\n\t * gets all of the forms in the document with an optional selector to filter them\r\n\t * by\r\n\t * @param {string} [optionalSelector] - Optional CSS selector to filter forms.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances wrapping form elements.\r\n\t */\r\n\tstatic forms(optionalSelector?: string): VexdElement[] {\r\n\t\tlet forms: HTMLCollectionOf<HTMLFormElement>;\r\n\t\tif (optionalSelector) {\r\n\t\t\tforms = document.querySelectorAll(`form${optionalSelector}`) as any;\r\n\t\t} else {\r\n\t\t\tforms = document.getElementsByTagName(\"form\");\r\n\t\t}\r\n\t\treturn Array.from(forms).map((el) => new VexdElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to document.getElementsByTagName\r\n\t * @param {string} tagName - The tag name.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances.\r\n\t */\r\n\tstatic tags(tagName: string): VexdElement[] {\r\n\t\tconst tags = document.getElementsByTagName(tagName);\r\n\t\treturn Array.from(tags).map((el) => new VexdElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to document.getElementsByClassName\r\n\t * @param {string} className - The class name.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances.\r\n\t */\r\n\tstatic className(className: string): VexdElement[] {\r\n\t\tconst elements = document.getElementsByClassName(className);\r\n\t\treturn Array.from(elements).map((el) => new VexdElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * creates a VexdElement from a template literal and returns the\r\n\t * \"top-level\" element or container, if there are multiple only the\r\n\t * first one is returned as to ensure your templates are short as this\r\n\t * shouldn't be used for massive templates\r\n\t */\r\n\tstatic template(\r\n\t\tstrings: TemplateStringsArray,\r\n\t\t...values: any[]\r\n\t): VexdElement {\r\n\t\tconst rawHTML = strings.reduce((result, string, i) => {\r\n\t\t\tconst value = i < values.length ? String(values[i] ?? \"\") : \"\";\r\n\t\t\treturn result + string + value;\r\n\t\t}, \"\");\r\n\r\n\t\tconst template = document.createElement(\"template\");\r\n\t\ttemplate.innerHTML = rawHTML.trim();\r\n\r\n\t\tconst content = template.content;\r\n\t\treturn new VexdElement(content.firstChild as HTMLElement);\r\n\t}\r\n\r\n\r\n\tstatic on(event: string, callback: VoidFunction): VoidFunction {\r\n\t\tdocument.addEventListener(event, callback);\r\n\t\treturn () => document.removeEventListener(event, callback);\r\n\t}\r\n}\r\n","type CallbackOrValue<T> = T | ((oldState: T) => T);\r\n/**\r\n * Core reactive state management class\r\n */\r\nexport class VexdState<T> {\r\n\tprivate value: T;\r\n\tprivate subscribers: ((newState: T) => void)[] = [];\r\n\r\n\tconstructor(initialValue: T) {\r\n\t\tthis.value = initialValue;\r\n\t}\r\n\r\n\tpublic get state(): T {\r\n\t\treturn this.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Update state with a new value or using a function that receives the previous state\r\n\t * @param newState New value or function to transform the current state\r\n\t */\r\n\tpublic setState(newState: CallbackOrValue<T>): void {\r\n\t\tconst previousValue = this.value;\r\n\r\n\t\tif (typeof newState === \"function\") {\r\n\t\t\tthis.value = (newState as (oldState: T) => T)(previousValue);\r\n\t\t} else {\r\n\t\t\tthis.value = newState;\r\n\t\t}\r\n\r\n\t\tif (this.value !== previousValue) {\r\n\t\t\tthis.subscribers.forEach((subscriber) => subscriber(this.value));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Register a side effect function that runs on state changes\r\n\t * @param fn Function to execute when state changes\r\n\t * @param triggerNow Whether to execute the function immediately\r\n\t * @returns Unsubscribe function\r\n\t */\r\n\tpublic sideEffect(\r\n\t\tfn: (newState: T) => void,\r\n\t\ttriggerNow: boolean = false\r\n\t): () => void {\r\n\t\tif (triggerNow) {\r\n\t\t\tfn(this.value);\r\n\t\t}\r\n\t\tthis.subscribers.push(fn);\r\n\t\treturn () => {\r\n\t\t\tconst index = this.subscribers.indexOf(fn);\r\n\t\t\tif (index !== -1) this.subscribers.splice(index, 1);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Remove all subscribers\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis.subscribers = [];\r\n\t}\r\n}\r\n\r\n/**\r\n * extended state management class for arrays with helper methods\r\n */\r\nexport class VexdStateList<T> extends VexdState<T[]> {\r\n\t/**\r\n\t * add an item to the list\r\n\t * @param item Item to add\r\n\t */\r\n\tpublic add(item: T): void {\r\n\t\tthis.setState((oldState) => [...oldState, item]);\r\n\t}\r\n\r\n\t/**\r\n\t * Remove items that match the predicate\r\n\t * @param predicate Function that returns true for items to keep\r\n\t */\r\n\tpublic remove(predicate: (item: T) => boolean): void {\r\n\t\tthis.setState((oldState) => oldState.filter((item) => !predicate(item)));\r\n\t}\r\n\r\n\t/**\r\n\t * Transform each item in the list\r\n\t * @param callback Mapping function\r\n\t */\r\n\tpublic map(callback: (item: T) => T): void {\r\n\t\tthis.setState((oldState) => oldState.map(callback));\r\n\t}\r\n\r\n\t/**\r\n\t * Find an item in the list\r\n\t * @param predicate Function that returns true when the desired item is found\r\n\t * @returns The found item or undefined\r\n\t */\r\n\tpublic find(predicate: (item: T) => boolean): T | undefined {\r\n\t\treturn this.state.find(predicate);\r\n\t}\r\n\r\n\t/**\r\n\t * Filter the list without modifying the original\r\n\t * @param predicate Function that returns true for items to include\r\n\t * @returns A new filtered array\r\n\t */\r\n\tpublic filter(predicate: (item: T) => boolean): T[] {\r\n\t\treturn this.state.filter(predicate);\r\n\t}\r\n}\r\n","import { VexdState, VexdStateList } from \"./vexd-state\";\r\n\r\ninterface VexTimedHook {\r\n\tstart: () => void;\r\n\tstop: () => void;\r\n\treset: () => void;\r\n}\r\n\r\n/**\r\n * Creates a managed interval that can be started, stopped, and reset\r\n * @param timerFn Function to execute on each interval\r\n * @param ms Millisecond interval (defaults to 1000ms)\r\n * @returns Controlled interval hook\r\n */\r\nfunction createInterval(timerFn: () => void, ms: number = 1000): VexTimedHook {\r\n\tlet intervalId: number | null = null;\r\n\r\n\tconst start = () => {\r\n\t\tif (intervalId) stop();\r\n\t\tintervalId = setInterval(timerFn, ms);\r\n\t};\r\n\r\n\tconst stop = () => {\r\n\t\tif (!intervalId) return;\r\n\t\tclearInterval(intervalId);\r\n\t\tintervalId = null;\r\n\t};\r\n\r\n\tconst reset = () => {\r\n\t\tstop();\r\n\t\tstart();\r\n\t};\r\n\r\n\treturn { start, stop, reset };\r\n}\r\n\r\n/**\r\n * Creates a managed timeout that can be started, stopped, and reset\r\n * @param timerFn Function to execute after the timeout\r\n * @param ms Millisecond delay (defaults to 1000ms)\r\n * @returns Controlled timeout hook\r\n */\r\nfunction createTimer(timerFn: () => void, ms: number = 1000): VexTimedHook {\r\n\tlet timeoutId: number | null = null;\r\n\r\n\tconst start = () => {\r\n\t\tif (timeoutId) stop();\r\n\t\ttimeoutId = setTimeout(timerFn, ms);\r\n\t};\r\n\r\n\tconst stop = () => {\r\n\t\tif (!timeoutId) return;\r\n\t\tclearTimeout(timeoutId);\r\n\t\ttimeoutId = null;\r\n\t};\r\n\r\n\tconst reset = () => {\r\n\t\tstop();\r\n\t\tstart();\r\n\t};\r\n\r\n\treturn { start, stop, reset };\r\n}\r\n\r\ntype EffectStore = readonly [\r\n\t(effect: VoidFunction) => VoidFunction,\r\n\tVoidFunction\r\n];\r\n\r\n/**\r\n * Creates a store for tracking and disposing of effects\r\n * @returns A tuple containing an addEffect function and a dispose function\r\n */\r\nfunction effectStore(): EffectStore {\r\n\tconst effects: VoidFunction[] = [];\r\n\r\n\tconst addEffect = (effect: VoidFunction): VoidFunction => {\r\n\t\teffects.push(effect);\r\n\t\treturn () => {\r\n\t\t\tconst index = effects.indexOf(effect);\r\n\t\t\tif (index !== -1) effects.splice(index, 1);\r\n\t\t};\r\n\t};\r\n\r\n\tconst dispose = () => {\r\n\t\teffects.forEach((disposeFn) => {\r\n\t\t\tif (disposeFn) disposeFn();\r\n\t\t});\r\n\t};\r\n\r\n\treturn [addEffect, dispose] as const;\r\n}\r\n\r\n/**\r\n * create a reactive state container\r\n * @param initialValue Initial state value\r\n * @returns A VexdState instance\r\n */\r\nfunction state<T>(initialValue: T): VexdState<T> {\r\n\treturn new VexdState<T>(initialValue);\r\n}\r\n\r\n/**\r\n * create a reactive state container for an array\r\n * @param initialValue Initial array value\r\n * @returns A VexdStateList instance\r\n */\r\nfunction stateList<T>(initialValue: T[] = []): VexdStateList<T> {\r\n\treturn new VexdStateList<T>(initialValue);\r\n}\r\n\r\n/**\r\n * create a managed AJAX request\r\n * @param url The endpoint URL\r\n * @param options Request configuration options\r\n * @returns A controllable request object with state management\r\n */\r\n\r\nexport {\r\n\tcreateInterval,\r\n\tcreateTimer,\r\n\teffectStore,\r\n\tstate,\r\n\tstateList,\r\n\tVexdState,\r\n\tVexdStateList,\r\n\tVexTimedHook,\r\n};\r\n"],"names":[],"mappings":"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"}