{"version":3,"file":"index.umd.js","sources":["../src/vexd-element.ts","../src/vex-doc.ts"],"sourcesContent":["/**\r\n * @file vexd-element.ts\r\n * @description A lightweight DOM utility class for chainable element manipulation, animations, and reactive signals.\r\n */\r\n\r\nexport class VexdElement {\r\n\tprivate el: HTMLElement;\r\n\tprivate static animationsInjected: boolean = false;\r\n\r\n\t/**\r\n\t * creates an instance of VexdElement.\r\n\t * @param {HTMLElement | string} element - A DOM element or a CSS selector string.\r\n\t * @throws Will throw an error if the element is not found.\r\n\t */\r\n\tconstructor(element: HTMLElement | string) {\r\n\t\tif (typeof element === \"string\") {\r\n\t\t\tconst found = document.querySelector(element);\r\n\t\t\tif (!found) {\r\n\t\t\t\tthrow new Error(`VexJS: Element not found for selector: ${element}`);\r\n\t\t\t}\r\n\t\t\tthis.el = found as HTMLElement;\r\n\t\t} else {\r\n\t\t\tthis.el = element;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * returns a new VexdElement instance wrapping the first descendant matching the selector.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @returns {VexdElement} A new VexdElement instance.\r\n\t * @throws Will throw an error if no element is found.\r\n\t */\r\n\tselect(selector: string): VexdElement {\r\n\t\tconst found = this.el.querySelector(selector);\r\n\t\tif (!found) {\r\n\t\t\tthrow new Error(`VexJS: element not found for selector: ${selector}`);\r\n\t\t}\r\n\t\treturn new VexdElement(found as HTMLElement);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the element's id.\r\n\t * @overload\r\n\t * @returns {string} The element's id.\r\n\t */\r\n\tid(): string;\r\n\t/**\r\n\t * Selects an element by id.\r\n\t * @param elementId {string}\r\n\t * @returns {VexdElement} A new VexdElement instance.\r\n\t */\r\n\tid(elementId: string): VexdElement;\r\n\tid(elementId?: string): string | VexdElement {\r\n\t\tif (elementId === undefined) {\r\n\t\t\treturn this.el.id;\r\n\t\t}\r\n\t\treturn this.select(`#${elementId}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of VexdElement instances for all descendants matching the selector.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances.\r\n\t */\r\n\tall(selector: string): VexdElement[] {\r\n\t\tconst nodeList = this.el.querySelectorAll(selector);\r\n\t\treturn Array.from(nodeList).map((el) => new VexdElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * Iterates over each descendant matching the selector, invoking the callback.\r\n\t * @param {string} selector - CSS selector to search for.\r\n\t * @param {(VexdElement: VexdElement, index: number) => void} callback - Function to call for each element.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances.\r\n\t */\r\n\teach(\r\n\t\tselector: string,\r\n\t\tcallback: (VexdElement: VexdElement, index: number) => void\r\n\t): VexdElement[] {\r\n\t\tconst elements = this.all(selector);\r\n\t\telements.forEach((VexdElement, index) => callback(VexdElement, index));\r\n\t\treturn elements;\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets the inner HTML.\r\n\t * @overload\r\n\t * @returns {string} The element's inner HTML.\r\n\t */\r\n\thtml(): string;\r\n\t/**\r\n\t * sets the inner HTML and returns the instance.\r\n\t * @param {string} content - HTML content.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\thtml(content: string): VexdElement;\r\n\thtml(content?: string): string | VexdElement {\r\n\t\tif (content === undefined) {\r\n\t\t\treturn this.el.innerHTML;\r\n\t\t} else {\r\n\t\t\tthis.el.innerHTML = content;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets the text content.\r\n\t * @overload\r\n\t * @returns {string} The element's text content.\r\n\t */\r\n\ttext(): string;\r\n\t/**\r\n\t * sets the text content and returns the instance.\r\n\t * @param {string} content - Text content.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\ttext(content: string): VexdElement;\r\n\ttext(content?: string): string | VexdElement {\r\n\t\tif (content === undefined) {\r\n\t\t\treturn this.el.textContent || \"\";\r\n\t\t} else {\r\n\t\t\tthis.el.textContent = content;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * adds an event listener and returns a cleanup function to remove it.\r\n\t * @param {string} eventName - Event name.\r\n\t * @param {(e: Event) => void} callback - Callback function.\r\n\t * @returns {() => void} Function to remove the event listener.\r\n\t */\r\n\tevent(eventName: string, callback: (e: Event) => void): () => void {\r\n\t\tthis.el.addEventListener(eventName, callback);\r\n\t\treturn () => {\r\n\t\t\tthis.el.removeEventListener(eventName, callback);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * adds an event listener that is automatically removed after one invocation.\r\n\t * @param {string} eventName - Event name.\r\n\t * @param {(e: Event) => void} callback - Callback function.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tonce(eventName: string, callback: (e: Event) => void): VexdElement {\r\n\t\tthis.el.addEventListener(eventName, callback, { once: true });\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches a custom event.\r\n\t * @param {string} eventName - Custom event name.\r\n\t * @param {{ [key: string]: any }} [details={}] - Event details.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\temit(eventName: string, details: { [key: string]: any } = {}): VexdElement {\r\n\t\tconst event = new CustomEvent(eventName, { detail: details });\r\n\t\tthis.el.dispatchEvent(event);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t// ---------------------\r\n\t// element class methods\r\n\t// ---------------------\r\n\r\n\t/**\r\n\t * Adds a class to the element.\r\n\t * @param {string} className - Class name to add.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tclassed(className: string): VexdElement {\r\n\t\tthis.el.classList.add(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a class from the element.\r\n\t * @param {string} className - Class name to remove.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tdeclass(className: string): VexdElement {\r\n\t\tthis.el.classList.remove(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles a class on the element.\r\n\t * @param {string} className - Class name to toggle.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\ttoggleClass(className: string): VexdElement {\r\n\t\tthis.el.classList.toggle(className);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * checks if the element has a specific class.\r\n\t * @param {string} className - Class name to check.\r\n\t * @returns {boolean} True if the element has the class.\r\n\t */\r\n\thasClass(className: string): boolean {\r\n\t\treturn this.el.classList.contains(className);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets or sets an attribute.\r\n\t * @overload\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @returns {string} The attribute's value.\r\n\t */\r\n\tattr(attribute: string): string;\r\n\t/**\r\n\t * Sets an attribute and returns the instance.\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @param {string} value - Attribute value.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tattr(attribute: string, value: string): VexdElement;\r\n\tattr(attribute: string, value?: string): string | VexdElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.getAttribute(attribute) || \"\";\r\n\t\t} else {\r\n\t\t\tthis.el.setAttribute(attribute, value);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * checks if the element has a specific attribute.\r\n\t * @param {string} attribute - Attribute name.\r\n\t * @returns {boolean} True if the attribute exists.\r\n\t */\r\n\thasAttr(attribute: string): boolean {\r\n\t\treturn this.el.hasAttribute(attribute);\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets a data attribute.\r\n\t * @overload\r\n\t * @param {string} attribute - Data attribute name.\r\n\t * @returns {string} The data attribute's value.\r\n\t */\r\n\tdata(attribute: string): string;\r\n\t/**\r\n\t * sets a data attribute and returns the instance.\r\n\t * @param {string} attribute - Data attribute name.\r\n\t * @param {string} value - Data attribute value.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tdata(attribute: string, value: string): VexdElement;\r\n\tdata(attribute: string, value?: string): string | VexdElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.dataset[attribute] || \"\";\r\n\t\t} else {\r\n\t\t\tthis.el.dataset[attribute] = value;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets an inline style property.\r\n\t * @overload\r\n\t * @param {string} property - CSS property name.\r\n\t * @returns {string} The property's value.\r\n\t */\r\n\tstyle(property: string): string;\r\n\t/**\r\n\t * Sets a style property and returns the instance.\r\n\t * @param {string} property - CSS property name.\r\n\t * @param {string} value - CSS property value.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tstyle(property: string, value: string): VexdElement;\r\n\tstyle(property: string, value?: string): string | VexdElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn this.el.style.getPropertyValue(property);\r\n\t\t} else {\r\n\t\t\tthis.el.style.setProperty(property, value);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * gets or sets a native property.\r\n\t * @overload\r\n\t * @template T\r\n\t * @param {keyof T} propertyName - The property name.\r\n\t * @returns {T[keyof T]} The property's value.\r\n\t */\r\n\tprop<T>(propertyName: keyof T): T[keyof T];\r\n\t/**\r\n\t * sets a native property and returns the instance.\r\n\t * @template T\r\n\t * @param {keyof T} propertyName - The property name.\r\n\t * @param {T[keyof T]} value - The new value.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tprop<T>(propertyName: keyof T, value: T[keyof T]): VexdElement;\r\n\tprop<T>(propertyName: keyof T, value?: T[keyof T]): T[keyof T] | VexdElement {\r\n\t\tif (value === undefined) {\r\n\t\t\treturn (this.el as any)[propertyName];\r\n\t\t} else {\r\n\t\t\t(this.el as any)[propertyName] = value;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Filters descendant elements matching the selector and predicate.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @param {(VexdElement: VexdElement) => boolean} predicate - Predicate function.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances that match the predicate.\r\n\t */\r\n\twhere(\r\n\t\tselector: string,\r\n\t\tpredicate: (VexdElement: VexdElement) => boolean\r\n\t): VexdElement[] {\r\n\t\treturn this.all(selector).filter((VexdElement) => predicate(VexdElement));\r\n\t}\r\n\r\n\t/**\r\n\t * filters descendant elements matching the selector that do NOT satisfy the predicate.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @param {(VexdElement: VexdElement) => boolean} predicate - Predicate function.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances that do not match the predicate.\r\n\t */\r\n\texcluding(\r\n\t\tselector: string,\r\n\t\tpredicate: (vexEl: VexdElement) => boolean\r\n\t): VexdElement[] {\r\n\t\treturn this.all(selector).filter((vEl) => !predicate(vEl));\r\n\t}\r\n\r\n\t/**\r\n\t * returns the closest ancestor (or self) that matches the selector.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @returns {VexdElement | null} Closest matching VexdElement instance or null.\r\n\t */\r\n\tclosest(selector: string): VexdElement | null {\r\n\t\tconst found = this.el.closest(selector);\r\n\t\treturn found ? new VexdElement(found as HTMLElement) : null;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the parent element as a VexdElement instance.\r\n\t * @returns {VexdElement | null} The parent VexdElement instance or null.\r\n\t */\r\n\tparent(): VexdElement | null {\r\n\t\treturn this.el.parentElement ? new VexdElement(this.el.parentElement) : null;\r\n\t}\r\n\r\n\t/**\r\n\t * returns an array of children as VexdElement instances.\r\n\t * @returns {VexdElement[]} Array of child VexdElement instances.\r\n\t */\r\n\tchildren(): VexdElement[] {\r\n\t\treturn Array.from(this.el.children).map(\r\n\t\t\t(child) => new VexdElement(child as HTMLElement)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * returns the underlying native HTMLElement.\r\n\t * @returns {HTMLElement} The native DOM element.\r\n\t */\r\n\tnative(): HTMLElement {\r\n\t\treturn this.el;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Observes attribute changes on the element.\r\n\t * @param {string} attribute - Attribute name to observe.\r\n\t * @param {(oldValue: string | null, newValue: string | null) => void} callback - Callback when attribute changes.\r\n\t * @returns {() => void} Function to disconnect the observer.\r\n\t */\r\n\tobserve(\r\n\t\tattribute: string,\r\n\t\tcallback: (oldValue: string | null, newValue: string | null) => void\r\n\t): () => void {\r\n\t\tconst observer = new MutationObserver((mutations) => {\r\n\t\t\tfor (const mutation of mutations) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tmutation.type === \"attributes\" &&\r\n\t\t\t\t\tmutation.attributeName === attribute\r\n\t\t\t\t) {\r\n\t\t\t\t\tconst oldVal = mutation.oldValue;\r\n\t\t\t\t\tconst newVal = this.el.getAttribute(attribute);\r\n\t\t\t\t\tcallback(oldVal, newVal);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tobserver.observe(this.el, {\r\n\t\t\tattributes: true,\r\n\t\t\tattributeFilter: [attribute],\r\n\t\t\tattributeOldValue: true,\r\n\t\t});\r\n\t\treturn () => observer.disconnect();\r\n\t}\r\n\r\n\t/**\r\n\t * uses IntersectionObserver to observe when the element enters or leaves the viewport.\r\n\t * @param {(entry: IntersectionObserverEntry) => void} onScreen - Callback when element is in view.\r\n\t * @param {(entry: IntersectionObserverEntry) => void} offScreen - Callback when element is out of view.\r\n\t * @param {IntersectionObserverInit} [options] - IntersectionObserver options.\r\n\t * @returns {() => void} Function to disconnect the observer.\r\n\t */\r\n\tintersection(\r\n\t\tonScreen: (entry: IntersectionObserverEntry) => void,\r\n\t\toffScreen: (entry: IntersectionObserverEntry) => void,\r\n\t\toptions?: IntersectionObserverInit\r\n\t): () => void {\r\n\t\tconst observer = new IntersectionObserver((entries) => {\r\n\t\t\tentries.forEach((entry) => {\r\n\t\t\t\tentry.isIntersecting ? onScreen(entry) : offScreen(entry);\r\n\t\t\t});\r\n\t\t}, options);\r\n\t\tobserver.observe(this.el);\r\n\t\treturn () => observer.disconnect();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a class to the element for a specified time (ms) or until a promise resolves.\r\n\t * @param {string} className - Class name to add.\r\n\t * @param {number | Promise<any>} duration - Duration in ms or a promise.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\ttimedClass(className: string, duration: number | Promise<any>): VexdElement {\r\n\t\tthis.classed(className);\r\n\t\tif (typeof duration === \"number\") {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.declass(className);\r\n\t\t\t}, duration);\r\n\t\t} else if (duration && typeof duration.then === \"function\") {\r\n\t\t\tduration.then(() => this.declass(className));\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * injects animation CSS if not already injected.\r\n\t * @private\r\n\t */\r\n\tprivate static ensureAnimationsInjected(): void {\r\n\t\tif (VexdElement.animationsInjected) return;\r\n\t\tVexdElement.animationsInjected = true;\r\n\t}\r\n\r\n\t/**\r\n\t * helper that applies an animation class with a given duration.\r\n\t * @private\r\n\t * @param {string} animationClass - CSS class for the animation.\r\n\t * @param {number} duration - Duration of the animation in ms.\r\n\t * @param {() => void} [onComplete] - Optional callback after animation.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tprivate animateClass(\r\n\t\tanimationClass: string,\r\n\t\tduration: number,\r\n\t\tonComplete?: () => void\r\n\t): VexdElement {\r\n\t\tVexdElement.ensureAnimationsInjected();\r\n\t\tthis.el.style.setProperty(\"--vex-duration\", `${duration}ms`);\r\n\t\tthis.classed(animationClass);\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.declass(animationClass);\r\n\t\t\tif (onComplete) onComplete();\r\n\t\t}, duration);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * fades in the element.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tfadeIn(duration: number, onComplete?: () => void): VexdElement {\r\n\t\treturn this.animateClass(\"vex-anim-fade-in\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * fades out the element.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tfadeOut(duration: number, onComplete?: () => void): VexdElement {\r\n\t\treturn this.animateClass(\"vex-anim-fade-out\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Slides the element in from the left.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tslideRight(duration: number, onComplete?: () => void): VexdElement {\r\n\t\treturn this.animateClass(\"vex-anim-slide-right\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Slightly moves the element to the left.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tslightLeft(duration: number, onComplete?: () => void): VexdElement {\r\n\t\treturn this.animateClass(\"vex-anim-slight-left\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Slightly moves the element down.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tslightDown(duration: number, onComplete?: () => void): VexdElement {\r\n\t\treturn this.animateClass(\"vex-anim-slight-down\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Slides the element up.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tslideUp(duration: number, onComplete?: () => void): VexdElement {\r\n\t\treturn this.animateClass(\"vex-anim-slide-up\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * rotates the element.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tspins(duration: number, onComplete?: () => void): VexdElement {\r\n\t\treturn this.animateClass(\"vex-anim-spins\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Bounces the element.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tbounces(duration: number, onComplete?: () => void): VexdElement {\r\n\t\treturn this.animateClass(\"vex-anim-bounces\", duration, onComplete);\r\n\t}\r\n\r\n\t/**\r\n\t * Blinks the element's text.\r\n\t * @param {number} duration - Duration in ms.\r\n\t * @param {() => void} [onComplete] - Callback after animation completes.\r\n\t * @returns {VexdElement} The current VexdElement instance.\r\n\t */\r\n\tblinkText(duration: number, onComplete?: () => void): VexdElement {\r\n\t\treturn this.animateClass(\"vex-anim-blink-text\", duration, onComplete);\r\n\t}\r\n}\r\n","/**\r\n * @file vex-doc.ts\r\n * @description Document-level utilities for working with VexdElement.\r\n */\r\n\r\nimport { VexdElement } from \"./vexd-element\";\r\n\r\nexport class vexdoc {\r\n\t/**\r\n\t * equivalent to document.querySelector, but returns a VexdElement instance.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @returns {VexdElement} A VexdElement instance wrapping the selected element.\r\n\t * @throws Will throw an error if no element is found.\r\n\t */\r\n\tstatic select(selector: string): VexdElement {\r\n\t\tconst el = document.querySelector(selector);\r\n\t\tif (!el) throw new Error(`Element not found for selector: ${selector}`);\r\n\t\treturn new VexdElement(el as HTMLElement);\r\n\t}\r\n\r\n\t/**\r\n\t * returns a VexdElement instance, equivalent to document.getElementById.\r\n\t * @param {string} id - The element's id.\r\n\t * @returns {VexdElement} a VexdElement instance.\r\n\t * @throws will throw an error if no element is found.\r\n\t */\r\n\tstatic id(id: string): VexdElement {\r\n\t\tconst el = document.getElementById(id);\r\n\t\tif (!el) throw new Error(`Element not found with id: ${id}`);\r\n\t\treturn new VexdElement(el);\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to document.querySelectorAll, but returns an array of VexdElement instances.\r\n\t * @param {string} selector - CSS selector.\r\n\t * @param {(vex: VexdElement, index: number) => void} callback - Callback for each element.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances.\r\n\t */\r\n\tstatic each(\r\n\t\tselector: string,\r\n\t\tcallback: (vex: VexdElement, index: number) => void\r\n\t): void {\r\n\t\tconst nodeList = document.querySelectorAll(selector);\r\n\t\tArray.from(nodeList).forEach((el, index) => {\r\n\t\t\tconst vex = new VexdElement(el as HTMLElement);\r\n\t\t\tcallback(vex, index);\r\n\t\t});\r\n\t}\r\n\r\n\tstatic all(selector: string): VexdElement[] {\r\n\t\tconst nodeList = document.querySelectorAll(selector);\r\n\t\treturn Array.from(nodeList).map((el) => new VexdElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * executes a callback once the DOM is fully loaded.\r\n\t * @param {() => void} callback - Callback function.\r\n\t */\r\n\tstatic ready(callback: () => void): void {\r\n\t\tif (document.readyState !== \"loading\") {\r\n\t\t\tcallback();\r\n\t\t} else {\r\n\t\t\tdocument.addEventListener(\"DOMContentLoaded\", callback);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * defines a snippet of HTML that is rendered from an object in the\r\n\t *\r\n\t * @template T\r\n\t * @param {(...args: any[]) => string} template - A template function.\r\n\t * @returns {{ render: (data: T) => string }} An object with a render method.\r\n\t */\r\n\tstatic snippet<T extends object>(\r\n\t\ttemplate: (props: T) => string\r\n\t): (data: T) => string {\r\n\t\treturn (data: T) => template(data);\r\n\t}\r\n\r\n\t/**\r\n\t * sets the document title.\r\n\t * @param {string} title - New title.\r\n\t */\r\n\tstatic title(title: string): void {\r\n\t\tdocument.title = title;\r\n\t}\r\n\r\n\t/**\r\n\t * imports a CSS file into the document by creating a <link> element.\r\n\t * @param {string} cssPath - Path to the CSS file.\r\n\t * @returns {VexdElement} A VexdElement instance wrapping the created <link> element.\r\n\t */\r\n\tstatic importCSS(cssPath: string): VexdElement {\r\n\t\tconst link = document.createElement(\"link\");\r\n\t\tlink.rel = \"stylesheet\";\r\n\t\tlink.href = cssPath;\r\n\t\tdocument.head.appendChild(link);\r\n\t\treturn new VexdElement(link as HTMLElement);\r\n\t}\r\n\r\n\t/**\r\n\t * removes CSS files that include the given file name.\r\n\t * @param {string} cssFileName - Partial name of the CSS file.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances for the removed elements.\r\n\t */\r\n\tstatic removeCSS(cssFileName: string): VexdElement[] {\r\n\t\tconst links = Array.from(\r\n\t\t\tdocument.querySelectorAll('link[rel=\"stylesheet\"]')\r\n\t\t);\r\n\t\tconst removed: VexdElement[] = [];\r\n\t\tlinks.forEach((link) => {\r\n\t\t\tif (link.getAttribute(\"href\")?.includes(cssFileName)) {\r\n\t\t\t\tlink.remove();\r\n\t\t\t\tremoved.push(new VexdElement(link as HTMLElement));\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn removed;\r\n\t}\r\n\r\n\t/**\r\n\t * creates a new element in the document, returned as a vex element.\r\n\t * @param {string} elementName - The tag name for the element.\r\n\t * @returns {VexdElement} A VexdElement instance wrapping the new element.\r\n\t */\r\n\tstatic create(elementName: string): VexdElement {\r\n\t\tconst el = document.createElement(elementName);\r\n\t\treturn new VexdElement(el);\r\n\t}\r\n\r\n\t/**\r\n\t * gets all of the forms in the document with an optional selector to filter them\r\n\t * by\r\n\t * @param {string} [optionalSelector] - Optional CSS selector to filter forms.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances wrapping form elements.\r\n\t */\r\n\tstatic forms(optionalSelector?: string): VexdElement[] {\r\n\t\tlet forms: HTMLCollectionOf<HTMLFormElement>;\r\n\t\tif (optionalSelector) {\r\n\t\t\tforms = document.querySelectorAll(`form${optionalSelector}`) as any;\r\n\t\t} else {\r\n\t\t\tforms = document.getElementsByTagName(\"form\");\r\n\t\t}\r\n\t\treturn Array.from(forms).map((el) => new VexdElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to document.getElementsByTagName\r\n\t * @param {string} tagName - The tag name.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances.\r\n\t */\r\n\tstatic tags(tagName: string): VexdElement[] {\r\n\t\tconst tags = document.getElementsByTagName(tagName);\r\n\t\treturn Array.from(tags).map((el) => new VexdElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * equivalent to document.getElementsByClassName\r\n\t * @param {string} className - The class name.\r\n\t * @returns {VexdElement[]} Array of VexdElement instances.\r\n\t */\r\n\tstatic className(className: string): VexdElement[] {\r\n\t\tconst elements = document.getElementsByClassName(className);\r\n\t\treturn Array.from(elements).map((el) => new VexdElement(el as HTMLElement));\r\n\t}\r\n\r\n\t/**\r\n\t * Provides a reactive signal mechanism.\r\n\t * @template T\r\n\t * @param {T} initialValue - The initial value.\r\n\t * @returns {[ (cb: (oldValue: T, newValue: T) => void) => void, (newValue: T) => void ]}\r\n\t * Subscribe and setState functions.\r\n\t */\r\n\tstatic signal<T>(initialValue: T): {\r\n\t\tsubscribe: (cb: (oldValue: T, newValue: T) => void) => void;\r\n\t\tsetState: (newValue: T) => void;\r\n\t\tgetState: () => T;\r\n\t} {\r\n\t\tlet state = initialValue;\r\n\t\tconst subscribers: Array<(oldValue: T, newValue: T) => void> = [];\r\n\t\tconst subscribe = (cb: (oldValue: T, newValue: T) => void) => {\r\n\t\t\tsubscribers.push(cb);\r\n\t\t};\r\n\t\tconst setState = (newValue: T) => {\r\n\t\t\tconst oldValue = state;\r\n\t\t\tstate = newValue;\r\n\t\t\tsubscribers.forEach((cb) => cb(oldValue, newValue));\r\n\t\t};\r\n\t\tconst getState = () => state;\r\n\t\treturn { subscribe, setState, getState };\r\n\t}\r\n}\r\n"],"names":[],"mappings":";;;;;;CAAA;;;CAGG;OAEU,WAAW,CAAA;CAIvB;;;;CAIG;CACH,IAAA,WAAA,CAAY,OAA6B,EAAA;CACxC,QAAA,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;aAChC,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC;aAC7C,IAAI,CAAC,KAAK,EAAE;CACX,gBAAA,MAAM,IAAI,KAAK,CAAC,0CAA0C,OAAO,CAAA,CAAE,CAAC;;CAErE,YAAA,IAAI,CAAC,EAAE,GAAG,KAAoB;;cACxB;CACN,YAAA,IAAI,CAAC,EAAE,GAAG,OAAO;;;CAKnB;;;;;CAKG;CACH,IAAA,MAAM,CAAC,QAAgB,EAAA;SACtB,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC;SAC7C,IAAI,CAAC,KAAK,EAAE;CACX,YAAA,MAAM,IAAI,KAAK,CAAC,0CAA0C,QAAQ,CAAA,CAAE,CAAC;;CAEtE,QAAA,OAAO,IAAI,WAAW,CAAC,KAAoB,CAAC;;CAe7C,IAAA,EAAE,CAAC,SAAkB,EAAA;CACpB,QAAA,IAAI,SAAS,KAAK,SAAS,EAAE;CAC5B,YAAA,OAAO,IAAI,CAAC,EAAE,CAAC,EAAE;;SAElB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,SAAS,CAAA,CAAE,CAAC;;CAGpC;;;;CAIG;CACH,IAAA,GAAG,CAAC,QAAgB,EAAA;SACnB,MAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC;SACnD,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,IAAI,WAAW,CAAC,EAAiB,CAAC,CAAC;;CAG5E;;;;;CAKG;KACH,IAAI,CACH,QAAgB,EAChB,QAA2D,EAAA;SAE3D,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;CACnC,QAAA,QAAQ,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,KAAK,KAAK,QAAQ,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;CACtE,QAAA,OAAO,QAAQ;;CAehB,IAAA,IAAI,CAAC,OAAgB,EAAA;CACpB,QAAA,IAAI,OAAO,KAAK,SAAS,EAAE;CAC1B,YAAA,OAAO,IAAI,CAAC,EAAE,CAAC,SAAS;;cAClB;CACN,YAAA,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,OAAO;CAC3B,YAAA,OAAO,IAAI;;;CAgBb,IAAA,IAAI,CAAC,OAAgB,EAAA;CACpB,QAAA,IAAI,OAAO,KAAK,SAAS,EAAE;CAC1B,YAAA,OAAO,IAAI,CAAC,EAAE,CAAC,WAAW,IAAI,EAAE;;cAC1B;CACN,YAAA,IAAI,CAAC,EAAE,CAAC,WAAW,GAAG,OAAO;CAC7B,YAAA,OAAO,IAAI;;;CAIb;;;;;CAKG;KACH,KAAK,CAAC,SAAiB,EAAE,QAA4B,EAAA;SACpD,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC;CAC7C,QAAA,OAAO,MAAK;aACX,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,CAAC;CACjD,SAAC;;CAGF;;;;;CAKG;KACH,IAAI,CAAC,SAAiB,EAAE,QAA4B,EAAA;CACnD,QAAA,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;CAC7D,QAAA,OAAO,IAAI;;CAGZ;;;;;CAKG;CACH,IAAA,IAAI,CAAC,SAAiB,EAAE,OAAA,GAAkC,EAAE,EAAA;CAC3D,QAAA,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;CAC7D,QAAA,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC;CAC5B,QAAA,OAAO,IAAI;;;;;CAOZ;;;;CAIG;CACH,IAAA,OAAO,CAAC,SAAiB,EAAA;SACxB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;CAChC,QAAA,OAAO,IAAI;;CAGZ;;;;CAIG;CACH,IAAA,OAAO,CAAC,SAAiB,EAAA;SACxB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC;CACnC,QAAA,OAAO,IAAI;;CAGZ;;;;CAIG;CACH,IAAA,WAAW,CAAC,SAAiB,EAAA;SAC5B,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC;CACnC,QAAA,OAAO,IAAI;;CAGZ;;;;CAIG;CACH,IAAA,QAAQ,CAAC,SAAiB,EAAA;SACzB,OAAO,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC;;KAiB7C,IAAI,CAAC,SAAiB,EAAE,KAAc,EAAA;CACrC,QAAA,IAAI,KAAK,KAAK,SAAS,EAAE;aACxB,OAAO,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE;;cACtC;aACN,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC;CACtC,YAAA,OAAO,IAAI;;;CAIb;;;;CAIG;CACH,IAAA,OAAO,CAAC,SAAiB,EAAA;SACxB,OAAO,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC;;KAiBvC,IAAI,CAAC,SAAiB,EAAE,KAAc,EAAA;CACrC,QAAA,IAAI,KAAK,KAAK,SAAS,EAAE;aACxB,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE;;cACjC;aACN,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,KAAK;CAClC,YAAA,OAAO,IAAI;;;KAkBb,KAAK,CAAC,QAAgB,EAAE,KAAc,EAAA;CACrC,QAAA,IAAI,KAAK,KAAK,SAAS,EAAE;aACxB,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC;;cACzC;aACN,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC;CAC1C,YAAA,OAAO,IAAI;;;KAoBb,IAAI,CAAI,YAAqB,EAAE,KAAkB,EAAA;CAChD,QAAA,IAAI,KAAK,KAAK,SAAS,EAAE;CACxB,YAAA,OAAQ,IAAI,CAAC,EAAU,CAAC,YAAY,CAAC;;cAC/B;CACL,YAAA,IAAI,CAAC,EAAU,CAAC,YAAY,CAAC,GAAG,KAAK;CACtC,YAAA,OAAO,IAAI;;;CAIb;;;;;CAKG;KACH,KAAK,CACJ,QAAgB,EAChB,SAAgD,EAAA;CAEhD,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC,WAAW,CAAC,CAAC;;CAG1E;;;;;CAKG;KACH,SAAS,CACR,QAAgB,EAChB,SAA0C,EAAA;SAE1C,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;;CAG3D;;;;CAIG;CACH,IAAA,OAAO,CAAC,QAAgB,EAAA;SACvB,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC;CACvC,QAAA,OAAO,KAAK,GAAG,IAAI,WAAW,CAAC,KAAoB,CAAC,GAAG,IAAI;;CAG5D;;;CAGG;KACH,MAAM,GAAA;SACL,OAAO,IAAI,CAAC,EAAE,CAAC,aAAa,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,IAAI;;CAG7E;;;CAGG;KACH,QAAQ,GAAA;SACP,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,GAAG,CACtC,CAAC,KAAK,KAAK,IAAI,WAAW,CAAC,KAAoB,CAAC,CAChD;;CAGF;;;CAGG;KACH,MAAM,GAAA;SACL,OAAO,IAAI,CAAC,EAAE;;CAIf;;;;;CAKG;KACH,OAAO,CACN,SAAiB,EACjB,QAAoE,EAAA;SAEpE,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,CAAC,SAAS,KAAI;CACnD,YAAA,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;CACjC,gBAAA,IACC,QAAQ,CAAC,IAAI,KAAK,YAAY;CAC9B,oBAAA,QAAQ,CAAC,aAAa,KAAK,SAAS,EACnC;CACD,oBAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ;qBAChC,MAAM,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC;CAC9C,oBAAA,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC;;;CAG3B,SAAC,CAAC;CACF,QAAA,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE;CACzB,YAAA,UAAU,EAAE,IAAI;aAChB,eAAe,EAAE,CAAC,SAAS,CAAC;CAC5B,YAAA,iBAAiB,EAAE,IAAI;CACvB,SAAA,CAAC;CACF,QAAA,OAAO,MAAM,QAAQ,CAAC,UAAU,EAAE;;CAGnC;;;;;;CAMG;CACH,IAAA,YAAY,CACX,QAAoD,EACpD,SAAqD,EACrD,OAAkC,EAAA;SAElC,MAAM,QAAQ,GAAG,IAAI,oBAAoB,CAAC,CAAC,OAAO,KAAI;CACrD,YAAA,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,KAAI;CACzB,gBAAA,KAAK,CAAC,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC;CAC1D,aAAC,CAAC;UACF,EAAE,OAAO,CAAC;CACX,QAAA,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;CACzB,QAAA,OAAO,MAAM,QAAQ,CAAC,UAAU,EAAE;;CAGnC;;;;;CAKG;KACH,UAAU,CAAC,SAAiB,EAAE,QAA+B,EAAA;CAC5D,QAAA,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;CACvB,QAAA,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;aACjC,UAAU,CAAC,MAAK;CACf,gBAAA,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;cACvB,EAAE,QAAQ,CAAC;;cACN,IAAI,QAAQ,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;CAC3D,YAAA,QAAQ,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;;CAE7C,QAAA,OAAO,IAAI;;CAGZ;;;CAGG;CACK,IAAA,OAAO,wBAAwB,GAAA;SACtC,IAAI,WAAW,CAAC,kBAAkB;aAAE;CACpC,QAAA,WAAW,CAAC,kBAAkB,GAAG,IAAI;;CAGtC;;;;;;;CAOG;CACK,IAAA,YAAY,CACnB,cAAsB,EACtB,QAAgB,EAChB,UAAuB,EAAA;SAEvB,WAAW,CAAC,wBAAwB,EAAE;CACtC,QAAA,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAA,EAAG,QAAQ,CAAA,EAAA,CAAI,CAAC;CAC5D,QAAA,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;SAC5B,UAAU,CAAC,MAAK;CACf,YAAA,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;CAC5B,YAAA,IAAI,UAAU;CAAE,gBAAA,UAAU,EAAE;UAC5B,EAAE,QAAQ,CAAC;CACZ,QAAA,OAAO,IAAI;;CAGZ;;;;;CAKG;KACH,MAAM,CAAC,QAAgB,EAAE,UAAuB,EAAA;SAC/C,OAAO,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,QAAQ,EAAE,UAAU,CAAC;;CAGnE;;;;;CAKG;KACH,OAAO,CAAC,QAAgB,EAAE,UAAuB,EAAA;SAChD,OAAO,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,QAAQ,EAAE,UAAU,CAAC;;CAGpE;;;;;CAKG;KACH,UAAU,CAAC,QAAgB,EAAE,UAAuB,EAAA;SACnD,OAAO,IAAI,CAAC,YAAY,CAAC,sBAAsB,EAAE,QAAQ,EAAE,UAAU,CAAC;;CAGvE;;;;;CAKG;KACH,UAAU,CAAC,QAAgB,EAAE,UAAuB,EAAA;SACnD,OAAO,IAAI,CAAC,YAAY,CAAC,sBAAsB,EAAE,QAAQ,EAAE,UAAU,CAAC;;CAGvE;;;;;CAKG;KACH,UAAU,CAAC,QAAgB,EAAE,UAAuB,EAAA;SACnD,OAAO,IAAI,CAAC,YAAY,CAAC,sBAAsB,EAAE,QAAQ,EAAE,UAAU,CAAC;;CAGvE;;;;;CAKG;KACH,OAAO,CAAC,QAAgB,EAAE,UAAuB,EAAA;SAChD,OAAO,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,QAAQ,EAAE,UAAU,CAAC;;CAGpE;;;;;CAKG;KACH,KAAK,CAAC,QAAgB,EAAE,UAAuB,EAAA;SAC9C,OAAO,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,QAAQ,EAAE,UAAU,CAAC;;CAGjE;;;;;CAKG;KACH,OAAO,CAAC,QAAgB,EAAE,UAAuB,EAAA;SAChD,OAAO,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,QAAQ,EAAE,UAAU,CAAC;;CAGnE;;;;;CAKG;KACH,SAAS,CAAC,QAAgB,EAAE,UAAuB,EAAA;SAClD,OAAO,IAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE,QAAQ,EAAE,UAAU,CAAC;;;CAziBvD,WAAkB,CAAA,kBAAA,GAAY,KAAK;;CCPnD;;;CAGG;OAIU,MAAM,CAAA;CAClB;;;;;CAKG;KACH,OAAO,MAAM,CAAC,QAAgB,EAAA;SAC7B,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;CAC3C,QAAA,IAAI,CAAC,EAAE;CAAE,YAAA,MAAM,IAAI,KAAK,CAAC,mCAAmC,QAAQ,CAAA,CAAE,CAAC;CACvE,QAAA,OAAO,IAAI,WAAW,CAAC,EAAiB,CAAC;;CAG1C;;;;;CAKG;KACH,OAAO,EAAE,CAAC,EAAU,EAAA;SACnB,MAAM,EAAE,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;CACtC,QAAA,IAAI,CAAC,EAAE;CAAE,YAAA,MAAM,IAAI,KAAK,CAAC,8BAA8B,EAAE,CAAA,CAAE,CAAC;CAC5D,QAAA,OAAO,IAAI,WAAW,CAAC,EAAE,CAAC;;CAG3B;;;;;CAKG;CACH,IAAA,OAAO,IAAI,CACV,QAAgB,EAChB,QAAmD,EAAA;SAEnD,MAAM,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC;CACpD,QAAA,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,KAAK,KAAI;CAC1C,YAAA,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,EAAiB,CAAC;CAC9C,YAAA,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC;CACrB,SAAC,CAAC;;KAGH,OAAO,GAAG,CAAC,QAAgB,EAAA;SAC1B,MAAM,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC;SACpD,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,IAAI,WAAW,CAAC,EAAiB,CAAC,CAAC;;CAG5E;;;CAGG;KACH,OAAO,KAAK,CAAC,QAAoB,EAAA;CAChC,QAAA,IAAI,QAAQ,CAAC,UAAU,KAAK,SAAS,EAAE;CACtC,YAAA,QAAQ,EAAE;;cACJ;CACN,YAAA,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,QAAQ,CAAC;;;CAIzD;;;;;;CAMG;KACH,OAAO,OAAO,CACb,QAA8B,EAAA;SAE9B,OAAO,CAAC,IAAO,KAAK,QAAQ,CAAC,IAAI,CAAC;;CAGnC;;;CAGG;KACH,OAAO,KAAK,CAAC,KAAa,EAAA;CACzB,QAAA,QAAQ,CAAC,KAAK,GAAG,KAAK;;CAGvB;;;;CAIG;KACH,OAAO,SAAS,CAAC,OAAe,EAAA;SAC/B,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC;CAC3C,QAAA,IAAI,CAAC,GAAG,GAAG,YAAY;CACvB,QAAA,IAAI,CAAC,IAAI,GAAG,OAAO;CACnB,QAAA,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;CAC/B,QAAA,OAAO,IAAI,WAAW,CAAC,IAAmB,CAAC;;CAG5C;;;;CAIG;KACH,OAAO,SAAS,CAAC,WAAmB,EAAA;CACnC,QAAA,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CACvB,QAAQ,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,CACnD;SACD,MAAM,OAAO,GAAkB,EAAE;CACjC,QAAA,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;;CACtB,YAAA,IAAI,CAAA,EAAA,GAAA,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,MAAA,GAAA,EAAA,CAAE,QAAQ,CAAC,WAAW,CAAC,EAAE;iBACrD,IAAI,CAAC,MAAM,EAAE;iBACb,OAAO,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAmB,CAAC,CAAC;;CAEpD,SAAC,CAAC;CACF,QAAA,OAAO,OAAO;;CAGf;;;;CAIG;KACH,OAAO,MAAM,CAAC,WAAmB,EAAA;SAChC,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC;CAC9C,QAAA,OAAO,IAAI,WAAW,CAAC,EAAE,CAAC;;CAG3B;;;;;CAKG;KACH,OAAO,KAAK,CAAC,gBAAyB,EAAA;CACrC,QAAA,IAAI,KAAwC;SAC5C,IAAI,gBAAgB,EAAE;aACrB,KAAK,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAO,IAAA,EAAA,gBAAgB,CAAE,CAAA,CAAQ;;cAC7D;CACN,YAAA,KAAK,GAAG,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC;;SAE9C,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,IAAI,WAAW,CAAC,EAAiB,CAAC,CAAC;;CAGzE;;;;CAIG;KACH,OAAO,IAAI,CAAC,OAAe,EAAA;SAC1B,MAAM,IAAI,GAAG,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC;SACnD,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,IAAI,WAAW,CAAC,EAAiB,CAAC,CAAC;;CAGxE;;;;CAIG;KACH,OAAO,SAAS,CAAC,SAAiB,EAAA;SACjC,MAAM,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,CAAC,SAAS,CAAC;SAC3D,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,IAAI,WAAW,CAAC,EAAiB,CAAC,CAAC;;CAG5E;;;;;;CAMG;KACH,OAAO,MAAM,CAAI,YAAe,EAAA;SAK/B,IAAI,KAAK,GAAG,YAAY;SACxB,MAAM,WAAW,GAA8C,EAAE;CACjE,QAAA,MAAM,SAAS,GAAG,CAAC,EAAsC,KAAI;CAC5D,YAAA,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;CACrB,SAAC;CACD,QAAA,MAAM,QAAQ,GAAG,CAAC,QAAW,KAAI;aAChC,MAAM,QAAQ,GAAG,KAAK;aACtB,KAAK,GAAG,QAAQ;CAChB,YAAA,WAAW,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;CACpD,SAAC;CACD,QAAA,MAAM,QAAQ,GAAG,MAAM,KAAK;CAC5B,QAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE;;CAEzC;;;;;;;;;"}